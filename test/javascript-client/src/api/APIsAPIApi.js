/**
 * REST-API Quality API
 * API for determing the Quality of REST APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Api', 'model/ApiTitle', 'model/ApplicationError', 'model/SettingsId'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Api'), require('../model/ApiTitle'), require('../model/ApplicationError'), require('../model/SettingsId'));
  } else {
    // Browser globals (root is window)
    if (!root.RestApiQualityApi) {
      root.RestApiQualityApi = {};
    }
    root.RestApiQualityApi.APIsAPIApi = factory(root.RestApiQualityApi.ApiClient, root.RestApiQualityApi.Api, root.RestApiQualityApi.ApiTitle, root.RestApiQualityApi.ApplicationError, root.RestApiQualityApi.SettingsId);
  }
}(this, function(ApiClient, Api, ApiTitle, ApplicationError, SettingsId) {
  'use strict';

  /**
   * APIsAPI service.
   * @module api/APIsAPIApi
   * @version 1.0.0
   */

  /**
   * Constructs a new APIsAPIApi. 
   * @alias module:api/APIsAPIApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apisGet operation.
     * @callback module:api/APIsAPIApi~apisGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Api>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available documents
     * @param {module:api/APIsAPIApi~apisGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Api>}
     */
    this.apisGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Api];

      return this.apiClient.callApi(
        '/apis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apisIdSettingsPut operation.
     * @callback module:api/APIsAPIApi~apisIdSettingsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingsId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Settings Set of an existing API
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SettingsId} opts.settingsId 
     * @param {module:api/APIsAPIApi~apisIdSettingsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingsId}
     */
    this.apisIdSettingsPut = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['settingsId'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apisIdSettingsPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SettingsId;

      return this.apiClient.callApi(
        '/apis/{id}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apisIdTitlePut operation.
     * @callback module:api/APIsAPIApi~apisIdTitlePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiTitle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the title of an API
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiTitle} opts.title 
     * @param {module:api/APIsAPIApi~apisIdTitlePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiTitle}
     */
    this.apisIdTitlePut = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['title'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apisIdTitlePut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiTitle;

      return this.apiClient.callApi(
        '/apis/{id}/title', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
