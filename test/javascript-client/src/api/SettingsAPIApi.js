/**
 * REST-API Quality API
 * API for determing the Quality of REST APIs
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApplicationError', 'model/Setting', 'model/SettingsCreationRequest', 'model/SettingsListItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApplicationError'), require('../model/Setting'), require('../model/SettingsCreationRequest'), require('../model/SettingsListItem'));
  } else {
    // Browser globals (root is window)
    if (!root.RestApiQualityApi) {
      root.RestApiQualityApi = {};
    }
    root.RestApiQualityApi.SettingsAPIApi = factory(root.RestApiQualityApi.ApiClient, root.RestApiQualityApi.ApplicationError, root.RestApiQualityApi.Setting, root.RestApiQualityApi.SettingsCreationRequest, root.RestApiQualityApi.SettingsListItem);
  }
}(this, function(ApiClient, ApplicationError, Setting, SettingsCreationRequest, SettingsListItem) {
  'use strict';

  /**
   * SettingsAPI service.
   * @module api/SettingsAPIApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SettingsAPIApi. 
   * @alias module:api/SettingsAPIApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the settingsGet operation.
     * @callback module:api/SettingsAPIApi~settingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SettingsListItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available setting sets
     * @param {module:api/SettingsAPIApi~settingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SettingsListItem>}
     */
    this.settingsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SettingsListItem];

      return this.apiClient.callApi(
        '/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsIdGet operation.
     * @callback module:api/SettingsAPIApi~settingsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Setting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a settings set
     * @param {String} id Settings ID
     * @param {module:api/SettingsAPIApi~settingsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Setting}
     */
    this.settingsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling settingsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Setting;

      return this.apiClient.callApi(
        '/settings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsIdPut operation.
     * @callback module:api/SettingsAPIApi~settingsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Setting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Settings Set
     * @param {String} id Settings ID
     * @param {module:model/SettingsCreationRequest} settings Report Creation
     * @param {module:api/SettingsAPIApi~settingsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Setting}
     */
    this.settingsIdPut = function(id, settings, callback) {
      var postBody = settings;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling settingsIdPut");
      }

      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling settingsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Setting;

      return this.apiClient.callApi(
        '/settings/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsPost operation.
     * @callback module:api/SettingsAPIApi~settingsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Setting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Settings Set
     * @param {module:model/SettingsCreationRequest} settings Report Creation
     * @param {module:api/SettingsAPIApi~settingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Setting}
     */
    this.settingsPost = function(settings, callback) {
      var postBody = settings;

      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling settingsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Setting;

      return this.apiClient.callApi(
        '/settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
