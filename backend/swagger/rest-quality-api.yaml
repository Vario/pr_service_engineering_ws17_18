swagger: '2.0'
info:
  title: REST-API Quality API
  description: API for determing the Quality of REST APIs
  version: 1.0.0
host: quality.rest.patrickbuchner.at
schemes:
  - http
basePath: /api/v1
consumes:
  - application/json
produces:
  - application/json
paths:
  /files:
    post:
      summary: Upload a file
      parameters:
        - name: file
          in: body
          description: The file to upload
          required: true
          schema:
            $ref: '#/definitions/FileRequest'
      tags:
        - Files API
      responses:
        200:
          description: Documents successfully uploaded
          schema:
            $ref: '#/definitions/FileResponse'
        400:
          description: Bad Request (e.g. not a json, required fields not available (title, version))
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /files/{id}:
    get:
      summary: Get the raw swagger json as uploaded
      parameters:
        - name: id
          in: path
          type: string
          required: true
      tags:
        - Files API
      responses:
        200:
          description: Documents successfully uploaded
          schema:
            $ref: '#/definitions/Swagger'
        404:
          description: Given File ID not found
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /apis:
    get:
      summary: Get all available documents
      tags:
        - APIs API
      responses:
        200:
          description: Returned Documents
          schema:
            type: array
            items:
              $ref: '#/definitions/Api'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /apis/{id}/settings:
    put:
      summary: Update the Settings Set of an existing API
      tags:
        - APIs API
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          required: true
        - name: settings-id
          in: body
          schema:
            $ref: '#/definitions/SettingsId'
      responses:
        200:
          description: Returned Documents
          schema:
            $ref: '#/definitions/SettingsId'
        404:
          description: API ID or Settings ID not found
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /apis/{id}/title:
    put:
      summary: Change the title of an API
      tags:
        - APIs API
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          required: true
        - name: title
          in: body
          schema:
            $ref: '#/definitions/ApiTitle'
      responses:
        200:
          description: New API title
          schema:
            $ref: '#/definitions/ApiTitle'
        404:
          description: Given API ID not found
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /reports/violation:
    post:
      summary: Create a new violation report
      parameters:
        - name: file
          in: body
          description: Report Creation
          required: true
          schema:
            $ref: '#/definitions/ViolationReportRequest'
      tags:
        - Reports API
      responses:
        200:
          description: Documents successfully uploaded
          schema:
            $ref: '#/definitions/ViolationReportResponse'
        400:
          description: Bad Request (e.g. not a json, required fields not available (title, version))
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /reports/comparison:
    post:
      summary: Create a new comparison report
      parameters:
        - name: file
          in: body
          description: Report Creation
          required: true
          schema:
            $ref: '#/definitions/ComparisonReportRequest'
      tags:
        - Reports API
      responses:
        200:
          description: Documents successfully uploaded
          schema:
            $ref: '#/definitions/ComparisonReportResponse'
        400:
          description: Bad Request (e.g. not a json, required fields not available (title, version))
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /rules:
    get:
      summary: Get all available rules
      tags:
        - Rules API
      responses:
        200:
          description: Available Rules
          schema:
            type: array
            items:
              $ref: '#/definitions/Rule'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /settings:
    post:
      summary: Create a new Settings Set
      parameters:
        - name: settings
          in: body
          description: Report Creation
          required: true
          schema:
            $ref: '#/definitions/SettingsCreationRequest'
      tags:
        - Settings API
      responses:
        200:
          description: Settings successfully created
          schema:
            $ref: '#/definitions/Setting'
        400:
          description: Bad Request (e.g. not a json, required fields not available (title, version))
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
    get:
      summary: Get all available setting sets
      tags:
        - Settings API
      responses:
        200:
          description: Settings successfully created
          schema:
            type: array
            items:
              $ref: '#/definitions/SettingsListItem'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /settings/{id}:
    put:
      summary: Update a Settings Set
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          description: Settings ID
          required: true
        - name: settings
          in: body
          description: Report Creation
          required: true
          schema:
            $ref: '#/definitions/SettingsCreationRequest'
      tags:
        - Settings API
      responses:
        200:
          description: No updated needed
          schema:
            $ref: '#/definitions/Setting'
        201:
          description: Settings successfully updated
          schema:
            $ref: '#/definitions/Setting'
        400:
          description: Bad Request (e.g. not a json, required fields not available (title, version))
          schema:
            $ref: '#/definitions/ApplicationError'
        404:
          description: id not found
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
    get:
      summary: Get a settings set
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          description: Settings ID
          required: true
      tags:
        - Settings API
      responses:
        200:
          description: Settings successfully created
          schema:
            $ref: '#/definitions/Setting'
        404:
          description: id not found
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
definitions:
  FileRequest:
    type: object
    required: [swagger]
    properties:
      title:
        type: string
        example: 'Petstore API'
      version:
        type: string
      swagger:
        type: object
        description: Swagger API Specification
      settings-id:
        type: string
        format: uuid
        description: UUID of a setting
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
  FileResponse:
    type: object
    properties:
      api-id:
        type: string
        format: uuid
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
      title:
        type: string
        example: 'Petstore API'
      version:
        type: string
      file-id:
        type: string
        format: uuid
      timestamp:
        type: string
        format: date-time
      settings-id:
        type: string
        format: uuid
        description: UUID of a setting
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
  Api:
    type: object
    properties:
      title:
        type: string
        example: Petstore API
      api-id:
        type: string
        format: uuid
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
      settings-id:
        type: string
        format: uuid
        description: UUID of a setting
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
      versions:
        type: array
        items:
          $ref: '#/definitions/VersionRequest'
  ApiTitle:
    type: object
    properties:
      title:
        type: string
        example: Petstore API
  VersionRequest:
    type: object
    properties:
      number:
        type: string
        description: API Versioning
        example: "v1"
      revisions:
        type: array
        items:
          $ref: '#/definitions/Revision'
  Revision:
    type: object
    properties:
      id:
        type: string
        format: date-time
      file:
        type: string
        format: uuid
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
        description: File UUID (compare /files API)
      url:
        type: string
        format: url
        example: 'http://quality.rest.patrickbuchner.at/api/v1/files/3efc7632-e833-40cd-b002-abdfaf426e6c'
      reports:
        type: object
        properties:
          violation:
            $ref: '#/definitions/ViolationReportResponse'
          comparison:
            type: array
            items:
              $ref: '#/definitions/ComparisonReportResponse'
  ViolationReportRequest:
    type: object
    properties:
      file-id:
        type: string
        format: uuid
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
  ViolationReportResponse:
    type: object
    description: Linting Response
    required:
      - violations
    properties:
      violations:
        type: array
        items:
          $ref: '#/definitions/Violation'
      message:
        type: string
      violations_count:
        $ref: '#/definitions/ViolationsCount'
  Violation:
    type: object
    description: Violation Object
    required:
      - title
      - description
      - violation_type
    properties:
      title:
        type: string
      description:
        type: string
      violation_type:
        type: string
        x-extensible-enum:
        - MUST
        - SHOULD
        - MAY
        - HINT
      rule_link:
        type: string
      paths:
        type: array
        items:
          type: string
  ViolationsCount:
    type: object
    description: Violation Count
    required:
      - must
      - should
      - may
      - could
      - hint
    properties:
      must:
        type: integer
        format: int32
      should:
        type: integer
        format: int32
      may:
        type: integer
        format: int32
      could:
        type: integer
        format: int32
      hint:
        type: integer
        format: int32
  Rule:
    type: object
    description: Rule
    required:
      - title
      - code
      - type
      - url
    properties:
      title:
        type: string
        example: 'Do Not Use URI Versioning'
      code:
        type: string
        example: '115'
      type:
        type: string
        example: 'MUST'
      url:
        type: string
        example: 'https://zalando.github.io/restful-api-guidelines/compatibility/Compatibility.html#must-do-not-use-uri-versioning'
  ComparisonReportRequest:
    type: object
    properties:
      file-ids:
        type: array
        items:
          type: string
          format: uuid
          example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
  ComparisonReportResponse:
    type: object
    properties:
      file-ids:
        type: array
        items:
          type: string
          format: uuid
          example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
      changes:
        type: object
        properties:
          errors:
            type: array
            items:
              $ref: '#/definitions/Change'
          warnings:
            type: array
            items:
              $ref: '#/definitions/Change'
          infos:
            type: array
            items:
              $ref: '#/definitions/Change'
  Change:
    type: object
    properties:
      ruleId:
        type: string
        example: "delete-object-property"
      message:
        type: string
        example: "definitions/Order - Property complete deleted"
      path:
        type: string
        example: "definitions/Order"
      method:
        type: string
        example: ""
  SettingsCreationRequest:
    type: object
    properties:
      name:
        type: string
        example: 'JKU Students API Guidelines'
      rules:
        type: array
        items:
          type: string
          example: "123"
  SettingsListItem:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
      name:
        type: string
        example: 'JKU Students API Guidelines'
  Setting:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
      name:
        type: string
        example: 'JKU Students API Guidelines'
      rules:
        type: array
        items:
          type: string
          example: "123"
  SettingsId:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
  Swagger:
    type: object
    example: {"swagger":"2.0","info":{"version":"1.0.0","title":"Swagger Petstore","description":"A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification","termsOfService":"http://swagger.io/terms/","contact":{"name":"Swagger API Team"},"license":{"name":"MIT"}},"host":"petstore.swagger.io","basePath":"/api","schemes":["http"],"consumes":["application/json"],"produces":["application/json"],"paths":{"/pets":{"get":{"description":"Returns all pets from the system that the user has access to","produces":["application/json"],"responses":{"200":{"description":"A list of pets.","schema":{"type":"array","items":{}}}}}}},"definitions":{"Pet":{"type":"object","required":["id","name"],"properties":{"id":{"type":"integer","format":"int64"},"name":{"type":"string"},"tag":{"type":"string"}}}}}
  ApplicationError:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  SwaggerDiffRequest:
    type: object
    properties:
      oldSpec:
        type: string
      newSpec:
        type: string
