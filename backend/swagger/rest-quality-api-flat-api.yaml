swagger: '2.0'
info:
  title: REST-API Quality API
  description: API for determing the Quality of REST APIs
  version: 1.0.0
host: quality.rest.patrickbuchner.at
schemes:
  - http
basePath: /api/v1
consumes:
  - application/json
produces:
  - application/json
paths:
  /files:
    post:
      summary: Upload a file
      parameters:
        - name: file
          in: body
          description: The file to upload
          required: true
          schema:
            $ref: '#/definitions/FileRequest'
      tags:
        - Files API
      responses:
        200:
          description: Documents successfully uploaded
          schema:
            $ref: '#/definitions/FileResponse'
        400:
          description: Bad Request (e.g. not a json, required fields not available (title, version))
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /apis:
    get:
      summary: Get all available documents
      tags:
        - APIs API
      responses:
        200:
          description: Returned Documents
          schema:
            type: array
            items:
              $ref: '#/definitions/ApiRequest'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /reports:
    post:
      summary: Create a new report
      parameters:
        - name: file
          in: body
          description: Report Creation
          required: true
          schema:
            $ref: '#/definitions/ReportRequest'
      tags:
        - Reports API
      responses:
        200:
          description: Documents successfully uploaded
          schema:
            $ref: '#/definitions/ReportResponse'
        400:
          description: Bad Request (e.g. not a json, required fields not available (title, version))
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /settings:
    post:
      summary: Create a new Settings Set
      parameters:
        - name: settings
          in: body
          description: Report Creation
          required: true
          schema:
            $ref: '#/definitions/SettingsCreationRequest'
      tags:
        - Settings API
      responses:
        200:
          description: Settings successfully created
          schema:
            $ref: '#/definitions/Setting'
        400:
          description: Bad Request (e.g. not a json, required fields not available (title, version))
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
    get:
      summary: Create all setting sets
      tags:
        - Settings API
      responses:
        200:
          description: Settings successfully created
          schema:
            type: array
            items:
              $ref: '#/definitions/SettingsListItem'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
  /settings/{id}:
    put:
      summary: Update a Settings Set
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          description: Settings ID
          required: true
        - name: settings
          in: body
          description: Report Creation
          required: true
          schema:
            $ref: '#/definitions/SettingsCreationRequest'
      tags:
        - Settings API
      responses:
        200:
          description: No updated needed
          schema:
            $ref: '#/definitions/Setting'
        201:
          description: Settings successfully updated
          schema:
            $ref: '#/definitions/Setting'
        400:
          description: Bad Request (e.g. not a json, required fields not available (title, version))
          schema:
            $ref: '#/definitions/ApplicationError'
        404:
          description: id not found
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
    get:
      summary: Get a settings set
      parameters:
        - name: id
          in: path
          type: string
          format: uuid
          description: Settings ID
          required: true
      tags:
        - Settings API
      responses:
        200:
          description: Settings successfully created
          schema:
            $ref: '#/definitions/Setting'
        404:
          description: id not found
          schema:
            $ref: '#/definitions/ApplicationError'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ApplicationError'
definitions:
  FileRequest:
    type: object
    required: [swagger]
    properties:
      api-id:
        type: string
      version:
        type: string
      swagger:
        type: object
        description: Swagger API Specification
      settings-id:
        type: string
        format: uuid
        description: UUID of a setting
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
  FileResponse:
    type: object
    properties:
      api-id:
        type: string
      version:
        type: string
      file-id:
        type: string
        format: uuid
      timestamp:
        type: string
        format: date-time
      settings-id:
        type: string
        format: uuid
        description: UUID of a setting
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
  ApiRequest:
    type: object
    properties:
      api-id:
        type: string
        example: Petstore API
        description: Title of the API
      settings-id:
        type: string
        format: uuid
        description: UUID of a setting
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
      versions:
        type: array
        items:
          $ref: '#/definitions/VersionRequest'
  VersionRequest:
    type: object
    properties:
      number:
        type: string
        description: API Versioning
        example: "v1"
      revisions:
        type: array
        items:
          $ref: '#/definitions/RevisionRequest'
  RevisionRequest:
    type: object
    properties:
      id:
        type: string
        format: date-time
      file:
        type: string
        format: uuid
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
        description: File UUID (compare /files API)
      reports:
        type: array
        items:
          $ref: '#/definitions/ReportResponse'
  ReportRequest:
    type: object
    properties:
      type:
        type: string
        description: Type of Report (validation, comparison)
        example: validation
      file-ids:
        type: array
        items:
          type: string
          format: uuid
          example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
  ReportResponse:
    type: object
    properties:
      type:
        type: string
        description: Type of Report (calidation, comparison)
        example: validation
      violations:
        type: integer
        description: Number of Rule Violations
  SettingsCreationRequest:
    type: object
    properties:
      name:
        type: string
        example: 'JKU Students API Guidelines'
      rules:
        type: array
        items:
          type: string
          example: "123"
  SettingsListItem:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
      name:
        type: string
        example: 'JKU Students API Guidelines'
  Setting:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: '3efc7632-e833-40cd-b002-abdfaf426e6c'
      name:
        type: string
        example: 'JKU Students API Guidelines'
      rules:
        type: array
        items:
          type: string
          example: "123"
  ApplicationError:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
